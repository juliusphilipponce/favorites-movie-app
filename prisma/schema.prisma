generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  favorites     Favorite[]
  movieRatings  MovieRating[]
  reviews       Review[]
  sessions      Session[]
  watchlists    Watchlist[]
  preferences   UserPreferences?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Movie {
  id               String          @id @default(cuid())
  tmdbId           Int             @unique
  title            String
  overview         String?
  releaseDate      DateTime?
  posterPath       String?
  backdropPath     String?
  runtime          Int?
  genres           String?
  voteAverage      Float?
  voteCount        Int?
  popularity       Float?
  adult            Boolean         @default(false)
  originalLanguage String?
  originalTitle    String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  favorites        Favorite[]
  ratings          MovieRating[]
  reviews          Review[]
  watchlistItems   WatchlistItem[]

  @@map("movies")
}

model Watchlist {
  id          String          @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean         @default(false)
  userId      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  items       WatchlistItem[]
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("watchlists")
}

model WatchlistItem {
  id          String    @id @default(cuid())
  watchlistId String
  movieId     String
  addedAt     DateTime  @default(now())
  notes       String?
  movie       Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
  watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)

  @@unique([watchlistId, movieId])
  @@map("watchlist_items")
}

model Review {
  id        String   @id @default(cuid())
  content   String
  rating    Float?
  userId    String
  movieId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@map("reviews")
}

model MovieRating {
  id        String   @id @default(cuid())
  rating    Float
  userId    String
  movieId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@map("movie_ratings")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  movieId   String
  createdAt DateTime @default(now())
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@map("favorites")
}

model UserPreferences {
  id                   String   @id @default(cuid())
  userId               String   @unique
  emailNotifications   Boolean  @default(true)
  movieRecommendations Boolean  @default(true)
  language             String   @default("en")
  theme                String   @default("dark")
  // Advanced Movie Filtering
  advancedFilteringEnabled Boolean @default(false)
  preferredGenres      String?  // JSON array of genre IDs
  excludedGenres       String?  // JSON array of genre IDs
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}
